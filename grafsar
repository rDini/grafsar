#!/bin/bash
#
# Script created by rDini

#:::::::::  FUNCTIONS
if [ ! -e "/tmp/grafsar/" ] # Check if file exists.
  then
	mkdir /tmp/grafsar/
        continue # On to next.
fi

Blank=/tmp/grafsar/blanklines



############ arrays	#################################################
<< ARRAYCOM
arrayZ=( one two three four five five )

echo

# Trailing Substring Extraction
echo ${arrayZ[@]:0}     # one two three four five five
                        # All elements.

echo ${arrayZ[@]:1}     # two three four five five
                        # All elements following element[0].

echo ${arrayZ[@]:1:2}   # two three
                        # Only the two elements after element[0].
-----
echo ${#array[*]}      #  6
                       #  Number of elements in array.
echo ${#array[@]}      #  6
                       #  Number of elements in array.
-----
ARRAYCOM
############################################################


MemSar(){
	line_numb=$(grep -n 'kbmemused  %memused' $location_sar | awk -F : '{print $1}')
#	echo $line_numb
#	echo $Blank
	var1=$(grep -n $[$line_numb-1] $Blank| awk -F : '{print $1}')
#	echo "line_numb -1 = " $[$line_numb-1]
#	echo var1=$var1
	nextline=$(sed -n $[$var1+1]p $Blank)
#	echo $nextline
	###  COMEÃ‡AR DO line_numb+1 ATE nextline
	for (( i=$[$line_numb+1]; i<$nextline ; i++))
	do
		echo $(sed -n $[$i-1]p $location_sar | awk '{("date --date=\""$1"\" +%T") |getline $1;print }')
	done
}

timeconverter(){
#	MenSar | awk '{}'
}



# Execute getopt on the arguments passed to this program, identified by the special character $@
PARSED_OPTIONS=$(getopt -n "$0"  -o hm2f: --long "help,memory,two,file:"  -- "$@")
 
#Bad arguments, something has gone wrong with the getopt command.
if [ $? -ne 0 ];
then
  exit 1
fi
 
# A little magic, necessary when using getopt.
eval set -- "$PARSED_OPTIONS"
 
 
# Now goes through all the options with a case and using shift to analyse 1 argument at a time.
#$1 identifies the first argument, and when we use shift we discard the first argument, so $2 becomes $1 and goes again through the case.
while true;
do
  case "$1" in
 
    -h|--help)
      echo "usage $0 -h -1 -2 -3 or $0 --help --one --two --three"
     shift;;
 
    -m|--memory)
      MemSar
      shift;;
 
    -2|--two)
      echo "Dos"
      shift;;
 
    -f|--file)
#      echo "tre"
 
      # We need to take the option of the argument "three"
      if [ -n "$2" ];
      then
        location_sar=$2
	grep -n '^ *$' $location_sar | sed -e 's/://' > $Blank
	echo "file is at $2"
      fi
      shift 2;;
 
    --)
      shift
      break;;
  esac
done
